{"ast":null,"code":"var _jsxFileName = \"/home/ram/Documents/Ghost/session-booking/src/components/UI/Button.tsx\";\nimport { Link } from \"react-router-dom\";\n\n// Setting up shared BaseProps that will be used no matter if a <button> or <Link> should be rendered\n\n// Setting up Button / Link specific props\n// The `to` prop will be used to determine if a <button> or <Link> should be rendered\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Using a type guard with a type predicate to determine if the received props are for a <button> or <Link>\nfunction isRouterLink(props) {\n  return \"to\" in props;\n}\nexport default function Button(props) {\n  if (isRouterLink(props)) {\n    // Destructuring inside the `if` statement to ensure TypeScript \"understands\" that `props` is of type `ButtonLinkProps` and `otherProps` will therefore only contain props that work on <Link>\n    const {\n      children,\n      textOnly,\n      ...otherProps\n    } = props;\n    return /*#__PURE__*/_jsxDEV(Link, {\n      className: `button ${textOnly ? \"button--text-only\" : \"\"}`,\n      ...otherProps,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Destructuring after the `if` statement to ensure TypeScript \"understands\" that `props` is of type `ButtonProps` and `otherProps` will therefore only contain props that work on <button>\n  const {\n    children,\n    textOnly,\n    ...otherProps\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: `button ${textOnly ? \"button--text-only\" : \"\"}`,\n    ...otherProps,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_c = Button;\nvar _c;\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"names":["Link","jsxDEV","_jsxDEV","isRouterLink","props","Button","children","textOnly","otherProps","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/ram/Documents/Ghost/session-booking/src/components/UI/Button.tsx"],"sourcesContent":["import type { ComponentPropsWithoutRef, ReactNode } from \"react\";\nimport { Link, type LinkProps } from \"react-router-dom\";\n\n// Setting up shared BaseProps that will be used no matter if a <button> or <Link> should be rendered\ntype BaseProps = {\n  children: ReactNode;\n  textOnly?: boolean;\n};\n\n// Setting up Button / Link specific props\n// The `to` prop will be used to determine if a <button> or <Link> should be rendered\ntype ButtonProps = ComponentPropsWithoutRef<\"button\"> &\n  BaseProps & { to?: never };\ntype ButtonLinkProps = LinkProps & BaseProps & { to: string };\n\n// Using a type guard with a type predicate to determine if the received props are for a <button> or <Link>\nfunction isRouterLink(\n  props: ButtonProps | ButtonLinkProps\n): props is ButtonLinkProps {\n  return \"to\" in props;\n}\n\nexport default function Button(props: ButtonProps | ButtonLinkProps) {\n  if (isRouterLink(props)) {\n    // Destructuring inside the `if` statement to ensure TypeScript \"understands\" that `props` is of type `ButtonLinkProps` and `otherProps` will therefore only contain props that work on <Link>\n    const { children, textOnly, ...otherProps } = props;\n    return (\n      <Link\n        className={`button ${textOnly ? \"button--text-only\" : \"\"}`}\n        {...otherProps}\n      >\n        {children}\n      </Link>\n    );\n  }\n\n  // Destructuring after the `if` statement to ensure TypeScript \"understands\" that `props` is of type `ButtonProps` and `otherProps` will therefore only contain props that work on <button>\n  const { children, textOnly, ...otherProps } = props;\n\n  return (\n    <button\n      className={`button ${textOnly ? \"button--text-only\" : \"\"}`}\n      {...otherProps}\n    >\n      {children}\n    </button>\n  );\n}\n"],"mappings":";AACA,SAASA,IAAI,QAAwB,kBAAkB;;AAEvD;;AAMA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAKA;AACA,SAASC,YAAYA,CACnBC,KAAoC,EACV;EAC1B,OAAO,IAAI,IAAIA,KAAK;AACtB;AAEA,eAAe,SAASC,MAAMA,CAACD,KAAoC,EAAE;EACnE,IAAID,YAAY,CAACC,KAAK,CAAC,EAAE;IACvB;IACA,MAAM;MAAEE,QAAQ;MAAEC,QAAQ;MAAE,GAAGC;IAAW,CAAC,GAAGJ,KAAK;IACnD,oBACEF,OAAA,CAACF,IAAI;MACHS,SAAS,EAAG,UAASF,QAAQ,GAAG,mBAAmB,GAAG,EAAG,EAAE;MAAA,GACvDC,UAAU;MAAAF,QAAA,EAEbA;IAAQ;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAEX;;EAEA;EACA,MAAM;IAAEP,QAAQ;IAAEC,QAAQ;IAAE,GAAGC;EAAW,CAAC,GAAGJ,KAAK;EAEnD,oBACEF,OAAA;IACEO,SAAS,EAAG,UAASF,QAAQ,GAAG,mBAAmB,GAAG,EAAG,EAAE;IAAA,GACvDC,UAAU;IAAAF,QAAA,EAEbA;EAAQ;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEb;AAACC,EAAA,GAzBuBT,MAAM;AAAA,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}